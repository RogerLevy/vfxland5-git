\ ------------------------------------------------------------------------------
\ Allegro Bindings
\ ------------------------------------------------------------------------------

$05020500 constant ALLEGRO_VERSION

extern "C" void al_acknowledge_resize( void * display );
extern "C" int al_attach_audio_stream_to_mixer( void * stream, void * mixer );
extern "C" bool al_attach_mixer_to_voice( void * mixer, void * voice );
extern "C" void al_build_transform( void * trans, float x, float y,
   float sx, float sy, float theta );
extern "C" void al_clear_keyboard_state( * state );
extern "C" void al_clear_to_color( float r, float g, float b, float a );
extern "C" bool al_close_directory( void * e );
extern "C" void al_compose_transform( void * dest, void * src );
extern "C" void al_copy_transform( void * dest, void * src );
extern "C" void * al_create_bitmap( uint w, uint h );
extern "C" void * al_create_builtin_font( );
extern "C" void * al_create_display( uint w, uint h );
extern "C" void * al_create_event_queue( );
extern "C" void * al_create_fs_entry( void * path );
extern "C" void * al_create_mixer( int rate, int depth, int conf );
extern "C" void * al_create_native_file_dialog( char *initial_path, char *title, char *patterns, int mode );
extern "C" void * al_create_sub_bitmap( void * bmp, int x, int y, int w, int h );
extern "C" void * al_create_timer( double speed_secs );
extern "C" void * al_create_vertex_decl( void * arr, int stride );
extern "C" void * al_create_voice( int rate, int depth, int conf );
extern "C" void al_destroy_audio_stream( void * stream );
extern "C" void al_destroy_bitmap( void * bitmap );
extern "C" void al_destroy_font( void * font );
extern "C" void al_destroy_fs_entry( void * entry );
extern "C" void al_destroy_native_file_dialog( void *dialog );
extern "C" void al_destroy_sample( void * sample );
extern "C" void al_destroy_shader( void * shader );
extern "C" void al_destroy_timer( void * timer );

extern "C" void al_do_multiline_text( void *font,
   float max_width, void *text,
   void *cb,
   void *extra );

extern "C" void al_draw_bitmap( void * bitmap, float x, float y, int flags );
extern "C" void al_draw_bitmap_region(
    void * bitmap,
    float sx, float sy, float sw, float sh, float dx, float dy, int flags
);
extern "C" void al_draw_circle( float cx , float cy , float rx, float r , float g , float b , float a , int float-thickness );
extern "C" void al_draw_filled_circle( float cx , float cy , float rx, float r , float g , float b , float a , int float-thickness );
extern "C" void al_draw_filled_rectangle( float x1, float y1, float x2, float y2,
   float r, float g, float b, float a );
extern "C" void al_draw_glyph( void * font, float r, float g, float b, float a, float x, float y, int codepoint);
extern "C" void al_draw_indexed_prim( void * vtxs, void * decl, void * texture, void * indices, int num_vtx, int type );
extern "C" void al_draw_line( float x1, float y1, float x2, float y2, float r, float g, float b, float a, int float-thickness );
extern "C" void al_draw_multiline_text( void *font,
     float r, float g, float b, float a, float x, float y, int float-max_width, int float-line_height,
     int flags, void *text );
extern "C" void al_draw_prim( void * vtxs, void * decl, void * texture, int start, int end, int type );
extern "C" void al_draw_rectangle( float x1, float y1, float x2, float y2, float r, float g, float b, float a, int float-thickness );
extern "C" void al_draw_rotated_bitmap( void *bitmap, float cx, float cy, float dx, float dy, float angle, int flags );
extern "C" void al_draw_scaled_rotated_bitmap ( void *bitmap,
   float cx, float cy, float dx, float dy, float xscale, float yscale,
   float angle, int flags );
extern "C" void al_draw_text( void *font, float r, float g, float b, float a, float x, float y, int flags, void *text );
extern "C" void al_draw_tinted_bitmap( void *ALLEGRO_BITMAP-*bitmap, float r, float g, float b, float a, float dx, float dy, int flags );
extern "C" void al_draw_tinted_scaled_rotated_bitmap_region(
   void * bitmap,
   float sx, float sy, float sw, float sh,
   float r, float g, float b, float a,
   float cx, float cy, float dx, float dy, float xscale, float yscale,
   float angle, int flags );
extern "C" bool al_fclose( void * f );
extern "C" void al_flip_display( void * display );
extern "C" void al_flush_event_queue( void * queue );
extern "C" void * al_get_backbuffer( void * display );
extern "C" int al_get_bitmap_format( void * bmp );
extern "C" int al_get_bitmap_height( void * bmp );
extern "C" int al_get_bitmap_width( void * bmp );
extern "C" void al_get_clipping_rectangle( void * int-x, void * int-y, void * int-w, void * int-h );
extern "C" void * al_get_current_inverse_transform( );
extern "C" void * al_get_display_event_source( void * display );
extern "C" int al_get_display_flags( void * display );
extern "C" uint al_get_display_height( void * display );
extern "C" int al_get_display_option( void * display, int option );
extern "C" int al_get_display_refresh_rate( void * display );
extern "C" uint al_get_display_width( void * display );
extern "C" int al_get_font_line_height( void * font );
extern "C" int al_get_fs_entry_mtime( void * entry );
extern "C" void * al_get_fs_entry_name( void * e );
extern "C" void * al_get_joystick_event_source( );
extern "C" void * al_get_keyboard_event_source( );
extern "C" void al_get_keyboard_state( void * state );
extern "C" bool al_get_monitor_info( int adapter, void * info );
extern "C" void * al_get_mouse_event_source( );
extern "C" void al_get_mouse_state( void * state );
extern "C" int al_get_mouse_state_axis( void * state, int axis );
extern "C" int al_get_native_file_dialog_count( void *dialog );
extern "C" const char *al_get_native_file_dialog_path( void *dialog, size_t i );
extern "C" int al_get_new_bitmap_flags( );
extern "C" bool al_get_next_event( void * queue, void * event );
extern "C" int al_get_num_display_modes( );
extern "C" int al_get_num_video_adapters( );
extern "C" void * al_get_parent_bitmap( void * bitmap );
extern "C" void al_get_pixel( void * destcolor, void * bmp, int x, int y );
extern "C" bool al_get_sample_instance_playing( void * spl );
extern "C" void * al_get_target_bitmap( );
extern "C" int al_get_text_width( void * font, void * str );
extern "C" void * al_get_timer_event_source( void * timer );
extern "C" void * al_get_win_window_handle( void * display );
extern "C" al_get_window_constraints( void * display, int * minw, int * minh, int * maxw, int * maxh );
extern "C" void * al_grab_font_from_bitmap( void * bmp, int ranges_n, void * ranges );
extern "C" void al_hide_mouse_cursor( void * display );
extern "C" void al_hold_bitmap_drawing( int hold );
extern "C" void al_identity_transform( void * m );
extern "C" int al_init_acodec_addon( );
extern "C" void al_init_font_addon( );
extern "C" int al_init_image_addon( );
extern "C" int al_init_native_dialog_addon( );
extern "C" int al_init_primitives_addon( );
extern "C" int al_init_ttf_addon( );
extern "C" int al_install_audio( );
extern "C" int al_install_haptic( );
extern "C" int al_install_joystick( );
extern "C" int al_install_keyboard( );
extern "C" int al_install_mouse( );
extern "C" int al_install_system( uint ver, void * atexit );
extern "C" int al_install_touch_input( );
extern "C" void al_invert_transform( void * trans );
extern "C" bool al_is_sub_bitmap( void * bitmap );
extern "C" int al_key_down( void * state, int keycode );
extern "C" void * al_load_audio_stream( void * filepath, int bufs, int bufsize );
extern "C" void * al_load_bitmap( void * filename );
extern "C" void * al_load_bitmap_f( void * ALLEGRO_FILE_fp, void * ident);
extern "C" void * al_load_bitmap_flags( void * filename, int flags );
extern "C" void * al_load_font( void * filepath, int size, int flags );
extern "C" void * al_load_sample( void * filepath );
extern "C" void * al_load_ttf_font( void * zstr, int size, int flags );
extern "C" void * al_lock_bitmap( void * bmp, int format, int flags );
extern "C" void * al_lock_sample_id( void * id );
extern "C" bool al_mouse_button_down( void * state, int button );
extern "C" bool al_open_directory( void * e );
extern "C" void * al_open_memfile(void *mem, int size, int size2, void *mode);
extern "C" void al_play_sample( void * sample, float gain, float pan, float speed,
   int loop, void * ret_id );
extern "C" void al_put_pixel( int x, int y, float r, float g, float b, float a );
extern "C" void * al_read_directory( void * e );
extern "C" void al_register_event_source( void * queue , void * source );
extern "C" bool al_reserve_samples( int count );
extern "C" void al_reset_clipping_rectangle( );
extern "C" bool al_resize_display( void * display, int w, int h );
extern "C" void al_rotate_transform( void * m, float theta );
extern "C" bool al_save_bitmap( void * fspec, void * bitmap );
extern "C" void al_scale_transform( void * m, float sx, float sy );
extern "C" bool al_set_audio_stream_gain( void * stream, float val );
extern "C" bool al_set_audio_stream_playing( void * stream, bool val );
extern "C" int al_set_audio_stream_playmode( void * stream, int mode );
extern "C" void al_set_blender( int op, int src, int dst );
extern "C" void al_set_clipping_rectangle( int x1, int y1, int x2, int y2 );
extern "C" bool al_set_default_mixer( void * mixer );
extern "C" bool al_set_display_flag( void * display, int flag, bool onoff );
extern "C" al_set_mixer_gain( void *mixer, float new_gain );
extern "C" bool al_set_mixer_playing( void * mixer, int state );
extern "C" void al_set_mouse_xy( void * display, int x, int y );
extern "C" void al_set_new_bitmap_flags( int flags );
extern "C" void al_set_new_bitmap_format( int format );
extern "C" void al_set_new_display_adapter( int adapter );
extern "C" void al_set_new_display_flags( int flags );
extern "C" void al_set_new_display_option( int option, int value, int importance );
extern "C" void al_set_target_bitmap( void * bitmap );
extern "C" void al_set_window_position( void * display, int x, int y );
extern "C" void al_show_mouse_cursor( void * display );
extern "C" bool al_show_native_file_dialog( void * display, void * dialog );
extern "C" void al_start_timer( void * timer );
extern "C" void al_stop_sample( void * ALLEGRO_SAMPLE_ID );
extern "C" void al_transform_coordinates( void * transform, float * x, float * y );
extern "C" void al_translate_transform( void * transform, float x, float y );
extern "C" void al_uninstall_keyboard( );
extern "C" void al_uninstall_system( );
extern "C" void al_unlock_bitmap( void * bmp );
extern "C" void al_unlock_sample_id( void * id );
extern "C" void al_use_transform( void * m );
extern "C" void al_wait_for_event( void * queue, void * event );

256 constant /ALLEGRO_KEYBOARD_STATE

1 1 lshift constant ALLEGRO_FULLSCREEN
1 2 lshift constant ALLEGRO_OPENGL
1 9 lshift constant ALLEGRO_FULLSCREEN_WINDOW
1 11 lshift constant ALLEGRO_PROGRAMMABLE_PIPELINE

enum ALLEGRO_DISPLAY_OPTIONS {
   ALLEGRO_RED_SIZE = 0,
   ALLEGRO_GREEN_SIZE = 1,
   ALLEGRO_BLUE_SIZE = 2,
   ALLEGRO_ALPHA_SIZE = 3,
   ALLEGRO_RED_SHIFT = 4,
   ALLEGRO_GREEN_SHIFT = 5,
   ALLEGRO_BLUE_SHIFT = 6,
   ALLEGRO_ALPHA_SHIFT = 7,
   ALLEGRO_ACC_RED_SIZE = 8,
   ALLEGRO_ACC_GREEN_SIZE = 9,
   ALLEGRO_ACC_BLUE_SIZE = 10,
   ALLEGRO_ACC_ALPHA_SIZE = 11,
   ALLEGRO_STEREO = 12,
   ALLEGRO_AUX_BUFFERS = 13,
   ALLEGRO_COLOR_SIZE = 14,
   ALLEGRO_DEPTH_SIZE = 15,
   ALLEGRO_STENCIL_SIZE = 16,
   ALLEGRO_SAMPLE_BUFFERS = 17,
   ALLEGRO_SAMPLES = 18,
   ALLEGRO_RENDER_METHOD = 19,
   ALLEGRO_FLOAT_COLOR = 20,
   ALLEGRO_FLOAT_DEPTH = 21,
   ALLEGRO_SINGLE_BUFFER = 22,
   ALLEGRO_SWAP_METHOD = 23,
   ALLEGRO_COMPATIBLE_DISPLAY = 24,
   ALLEGRO_UPDATE_DISPLAY_REGION = 25,
   ALLEGRO_VSYNC = 26,
   ALLEGRO_MAX_BITMAP_SIZE = 27,
   ALLEGRO_SUPPORT_NPOT_BITMAP = 28,
   ALLEGRO_CAN_DRAW_INTO_BITMAP = 29,
   ALLEGRO_SUPPORT_SEPARATE_ALPHA = 30,
   ALLEGRO_AUTO_CONVERT_BITMAPS = 31,
   ALLEGRO_SUPPORTED_ORIENTATIONS = 32,
   ALLEGRO_OPENGL_MAJOR_VERSION = 33,
   ALLEGRO_OPENGL_MINOR_VERSION = 34,
   ALLEGRO_DISPLAY_OPTIONS_COUNT
};

enum {
   ALLEGRO_DONTCARE,
   ALLEGRO_REQUIRE,
   ALLEGRO_SUGGEST
};

$00 constant ALLEGRO_AUDIO_DEPTH_INT8
$01 constant ALLEGRO_AUDIO_DEPTH_INT16
$02 constant ALLEGRO_AUDIO_DEPTH_INT24
$03 constant ALLEGRO_AUDIO_DEPTH_FLOAT32
$08 constant ALLEGRO_AUDIO_DEPTH_UNSIGNED
ALLEGRO_AUDIO_DEPTH_INT8  ALLEGRO_AUDIO_DEPTH_UNSIGNED or constant ALLEGRO_AUDIO_DEPTH_UINT8
ALLEGRO_AUDIO_DEPTH_INT16 ALLEGRO_AUDIO_DEPTH_UNSIGNED or constant ALLEGRO_AUDIO_DEPTH_UINT16
ALLEGRO_AUDIO_DEPTH_INT24 ALLEGRO_AUDIO_DEPTH_UNSIGNED or constant ALLEGRO_AUDIO_DEPTH_UINT24

$100 constant ALLEGRO_PLAYMODE_ONCE
$101 constant ALLEGRO_PLAYMODE_LOOP
$102 constant ALLEGRO_PLAYMODE_BIDIR

$10 constant ALLEGRO_CHANNEL_CONF_1
$20 constant ALLEGRO_CHANNEL_CONF_2
$30 constant ALLEGRO_CHANNEL_CONF_3
$40 constant ALLEGRO_CHANNEL_CONF_4
$51 constant ALLEGRO_CHANNEL_CONF_5_1
$61 constant ALLEGRO_CHANNEL_CONF_6_1
$71 constant ALLEGRO_CHANNEL_CONF_7_1

-1 constant ALLEGRO_DEFAULT_DISPLAY_ADAPTER
4 cells constant /ALLEGRO_MONITOR_INFO

1  constant  ALLEGRO_EVENT_JOYSTICK_AXIS
2  constant  ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN
3  constant  ALLEGRO_EVENT_JOYSTICK_BUTTON_UP
4  constant  ALLEGRO_EVENT_JOYSTICK_CONFIGURATION
10 constant  ALLEGRO_EVENT_KEY_DOWN
11 constant  ALLEGRO_EVENT_KEY_CHAR
12 constant  ALLEGRO_EVENT_KEY_UP
20 constant  ALLEGRO_EVENT_MOUSE_AXES
21 constant  ALLEGRO_EVENT_MOUSE_BUTTON_DOWN
22 constant  ALLEGRO_EVENT_MOUSE_BUTTON_UP
23 constant  ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY
24 constant  ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY
25 constant  ALLEGRO_EVENT_MOUSE_WARPED
30 constant  ALLEGRO_EVENT_TIMER
40 constant  ALLEGRO_EVENT_DISPLAY_EXPOSE
41 constant  ALLEGRO_EVENT_DISPLAY_RESIZE
42 constant  ALLEGRO_EVENT_DISPLAY_CLOSE
43 constant  ALLEGRO_EVENT_DISPLAY_LOST
44 constant  ALLEGRO_EVENT_DISPLAY_FOUND
45 constant  ALLEGRO_EVENT_DISPLAY_SWITCH_IN
46 constant  ALLEGRO_EVENT_DISPLAY_SWITCH_OUT
47 constant  ALLEGRO_EVENT_DISPLAY_ORIENTATION
48 constant  ALLEGRO_EVENT_DISPLAY_HALT_DRAWING
49 constant  ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING
50 constant  ALLEGRO_EVENT_TOUCH_BEGIN
51 constant  ALLEGRO_EVENT_TOUCH_END
52 constant  ALLEGRO_EVENT_TOUCH_MOVE
53 constant  ALLEGRO_EVENT_TOUCH_CANCEL
60 constant  ALLEGRO_EVENT_DISPLAY_CONNECTED
61 constant  ALLEGRO_EVENT_DISPLAY_DISCONNECTED

struct /ALLEGRO_EVENT-
    field: ALLEGRO_EVENT.type
    field: ALLEGRO_EVENT.source
    2 cells +field ALLEGRO_EVENT.timestamp
    union
    part
        field: DISPLAY_EVENT.x
        field: DISPLAY_EVENT.y
        field: DISPLAY_EVENT.width
        field: DISPLAY_EVENT.height
        field: DISPLAY_EVENT.orientation
    part
        field: JOYSTICK_EVENT.*id
        field: JOYSTICK_EVENT.stick
        field: JOYSTICK_EVENT.axis
        field: JOYSTICK_EVENT.pos (  float )
        field: JOYSTICK_EVENT.button
    part
        field: KEYBOARD_EVENT.display
        field: KEYBOARD_EVENT.keycode                 \ /* the physical key pressed*/
        field: KEYBOARD_EVENT.unichar                 \ /* unicode character or negative*/
        field: KEYBOARD_EVENT.modifiers               \ /* bit-field*/
        field: KEYBOARD_EVENT.repeat                  \ /* auto-repeated or not*/
    part
        field: MOUSE_EVENT.display
        \ /* ( display) Window the event originate from
        \ * ( x, y) Primary mouse position
        \ * ( z) Mouse wheel position ( 1D 'wheel'), or,
        \ * ( w, z) Mouse wheel position ( 2D 'ball')
        \ * ( pressure) The pressure applied, for stylus ( 0 or 1 for normal mouse)
        \ */
        field: MOUSE_EVENT.x
        field: MOUSE_EVENT.y
        field: MOUSE_EVENT.z
        field: MOUSE_EVENT.w
        field: MOUSE_EVENT.dx
        field: MOUSE_EVENT.dy
        field: MOUSE_EVENT.dz
        field: MOUSE_EVENT.dw
        field: MOUSE_EVENT.button
        field: MOUSE_EVENT.pressure (  float )
    part
        2 cells +field TIMER_EVENT.count
        2 cells +field TIMER_EVENT.error  \ double-float
    end-union
end-struct

\ didn't realize; if the struct isn't fully defined getting an event
\ would corrupt the dictionary.  temporary workaround: give it a generous fixed size.

2048 constant /ALLEGRO_EVENT

struct /ALLEGRO_MOUSE_STATE
    field: ALLEGRO_MOUSE_STATE.x
    field: ALLEGRO_MOUSE_STATE.y
    field: ALLEGRO_MOUSE_STATE.z
    field: ALLEGRO_MOUSE_STATE.w
    field: ALLEGRO_MOUSE_STATE.more_axis1
    field: ALLEGRO_MOUSE_STATE.more_axis2
    field: ALLEGRO_MOUSE_STATE.more_axis3
    field: ALLEGRO_MOUSE_STATE.more_axis4
    field: ALLEGRO_MOUSE_STATE.buttons
    field: ALLEGRO_MOUSE_STATE.pressure  \ float
    field: ALLEGRO_MOUSE_STATE.display
end-struct

0 constant ALLEGRO_ALIGN_LEFT
1 constant ALLEGRO_ALIGN_CENTER
2 constant ALLEGRO_ALIGN_RIGHT
4 constant ALLEGRO_ALIGN_INTEGER

enum ALLEGRO_BLEND_MODE {
   ALLEGRO_ZERO                = 0,
   ALLEGRO_ONE                 = 1,
   ALLEGRO_ALPHA               = 2,
   ALLEGRO_INVERSE_ALPHA       = 3,
   ALLEGRO_SRC_COLOR           = 4,
   ALLEGRO_DEST_COLOR          = 5,
   ALLEGRO_INVERSE_SRC_COLOR   = 6,
   ALLEGRO_INVERSE_DEST_COLOR  = 7,
   ALLEGRO_CONST_COLOR         = 8,
   ALLEGRO_INVERSE_CONST_COLOR = 9,
   ALLEGRO_NUM_BLEND_MODES
};

enum ALLEGRO_BLEND_OPERATIONS {
   ALLEGRO_ADD                = 0,
   ALLEGRO_SRC_MINUS_DEST     = 1,
   ALLEGRO_DEST_MINUS_SRC     = 2,
   ALLEGRO_NUM_BLEND_OPERATIONS
};


enum ALLEGRO_PRIM_TYPE {
  ALLEGRO_PRIM_LINE_LIST,
  ALLEGRO_PRIM_LINE_STRIP,
  ALLEGRO_PRIM_LINE_LOOP,
  ALLEGRO_PRIM_TRIANGLE_LIST,
  ALLEGRO_PRIM_TRIANGLE_STRIP,
  ALLEGRO_PRIM_TRIANGLE_FAN,
  ALLEGRO_PRIM_POINT_LIST,
  ALLEGRO_PRIM_NUM_TYPES
};

enum ALLEGRO_PRIM_ATTR {
   ALLEGRO_PRIM_POSITION = 1,
   ALLEGRO_PRIM_COLOR_ATTR,
   ALLEGRO_PRIM_TEX_COORD,
   ALLEGRO_PRIM_TEX_COORD_PIXEL,
   ALLEGRO_PRIM_USER_ATTR
};
   \ ALLEGRO_PRIM_ATTR_NUM = ALLEGRO_PRIM_USER_ATTR + ALLEGRO_PRIM_MAX_USER_ATTR

enum ALLEGRO_PRIM_STORAGE {
   ALLEGRO_PRIM_FLOAT_2,
   ALLEGRO_PRIM_FLOAT_3,
   ALLEGRO_PRIM_SHORT_2,
   ALLEGRO_PRIM_FLOAT_1,
   ALLEGRO_PRIM_FLOAT_4,
   ALLEGRO_PRIM_UBYTE_4,
   ALLEGRO_PRIM_SHORT_4,
   ALLEGRO_PRIM_NORMALIZED_UBYTE_4,
   ALLEGRO_PRIM_NORMALIZED_SHORT_2,
   ALLEGRO_PRIM_NORMALIZED_SHORT_4,
   ALLEGRO_PRIM_NORMALIZED_USHORT_2,
   ALLEGRO_PRIM_NORMALIZED_USHORT_4,
   ALLEGRO_PRIM_HALF_FLOAT_2,
   ALLEGRO_PRIM_HALF_FLOAT_4
};

struct /ALLEGRO_VERTEX_ELEMENT
  field: ALLEGRO_VERTEX_ELEMENT.attribute
  field: ALLEGRO_VERTEX_ELEMENT.storage
  field: ALLEGRO_VERTEX_ELEMENT.offset
end-struct

struct /ALLEGRO_VERTEX
  field: ALLEGRO_VERTEX.x
  field: ALLEGRO_VERTEX.y
  field: ALLEGRO_VERTEX.z
  field: ALLEGRO_VERTEX.u
  field: ALLEGRO_VERTEX.v
  field: ALLEGRO_VERTEX.r
  field: ALLEGRO_VERTEX.g
  field: ALLEGRO_VERTEX.b
  field: ALLEGRO_VERTEX.a
end-struct

$01 constant ALLEGRO_FILECHOOSER_FILE_MUST_EXIST
$02 constant ALLEGRO_FILECHOOSER_SAVE
$04 constant ALLEGRO_FILECHOOSER_FOLDER
$08 constant ALLEGRO_FILECHOOSER_PICTURES
$10 constant ALLEGRO_FILECHOOSER_SHOW_HIDDEN
$20 constant ALLEGRO_FILECHOOSER_MULTIPLE

#define ALLEGRO_TTF_NO_KERNING  $1
#define ALLEGRO_TTF_MONOCHROME  $2
#define ALLEGRO_TTF_NO_AUTOHINT $4

enum {
   ALLEGRO_KEEP_BITMAP_FORMAT       = 0x0002,   /* was a bitmap flag in 5.0 */
   ALLEGRO_NO_PREMULTIPLIED_ALPHA   = 0x0200,   /* was a bitmap flag in 5.0 */
   ALLEGRO_KEEP_INDEX               = 0x0800
};

enum ALLEGRO_PIXEL_FORMAT {
   ALLEGRO_PIXEL_FORMAT_ANY                   = 0,
   ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA          = 1,
   ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA        = 2,
   ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA       = 3,
   ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA       = 4,
   ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA     = 5,
   ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA       = 6,
   ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA       = 7,
   ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA     = 8,
   ALLEGRO_PIXEL_FORMAT_ARGB_8888             = 9,
   ALLEGRO_PIXEL_FORMAT_RGBA_8888             = 10,
   ALLEGRO_PIXEL_FORMAT_ARGB_4444             = 11,
   ALLEGRO_PIXEL_FORMAT_RGB_888               = 12,
   ALLEGRO_PIXEL_FORMAT_RGB_565               = 13,
   ALLEGRO_PIXEL_FORMAT_RGB_555               = 14,
   ALLEGRO_PIXEL_FORMAT_RGBA_5551             = 15,
   ALLEGRO_PIXEL_FORMAT_ARGB_1555             = 16,
   ALLEGRO_PIXEL_FORMAT_ABGR_8888             = 17,
   ALLEGRO_PIXEL_FORMAT_XBGR_8888             = 18,
   ALLEGRO_PIXEL_FORMAT_BGR_888               = 19,
   ALLEGRO_PIXEL_FORMAT_BGR_565               = 20,
   ALLEGRO_PIXEL_FORMAT_BGR_555               = 21,
   ALLEGRO_PIXEL_FORMAT_RGBX_8888             = 22,
   ALLEGRO_PIXEL_FORMAT_XRGB_8888             = 23,
   ALLEGRO_PIXEL_FORMAT_ABGR_F32              = 24,
   ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE          = 25,
   ALLEGRO_PIXEL_FORMAT_RGBA_4444             = 26,
   ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8      = 27,
   ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1  = 28,
   ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3  = 29,
   ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5  = 30,
   ALLEGRO_NUM_PIXEL_FORMATS
}

enum ALLEGRO_BITMAP_FLAGS {
   ALLEGRO_MEMORY_BITMAP            = 0x0001,
   ALLEGRO_NO_PRESERVE_TEXTURE      = 0x0008,
   ALLEGRO_MIN_LINEAR               = 0x0040,
   ALLEGRO_MAG_LINEAR               = 0x0080,
   ALLEGRO_MIPMAP                   = 0x0100,
   ALLEGRO_VIDEO_BITMAP             = 0x0400,
   ALLEGRO_CONVERT_BITMAP           = 0x1000
}

enum ALLEGRO_SHADER_PLATFORM {
    ALLEGRO_SHADER_AUTO = 0,
    ALLEGRO_SHADER_GLSL = 1,
    ALLEGRO_SHADER_HLSL = 2
}

enum ALLEGRO_SHADER_TYPE {
    ALLEGRO_VERTEX_SHADER = 1,
    ALLEGRO_PIXEL_SHADER = 2,
}

extern "C" void * al_create_shader( void * ALLEGRO_SHADER_PLATFORM-platform );
extern "C" bool al_attach_shader_source( void * ALLEGRO_SHADER-shader, int ALLEGRO_SHADER_TYPE-type,
    void * const-char-source );
extern "C" bool al_build_shader( void * ALLEGRO_SHADER-shader);
extern "C" void * al_get_shader_log( void * ALLEGRO_SHADER-shader );
extern "C" bool al_use_shader( void * ALLEGRO_SHADER-*shader );
extern "C" bool al_set_shader_sampler( void * const-char-*name, void * ALLEGRO_BITMAP-*bitmap, int unit );
extern "C" bool al_set_shader_matrix( void * const-char-*name, void * const-ALLEGRO_TRANSFORM-*matrix );
extern "C" bool al_set_shader_int( void * const-char-*name, int i );
extern "C" bool al_set_shader_float( void * name, float f );
extern "C" bool al_set_shader_bool( void * const-char-*name, bool b );
extern "C" bool al_set_shader_int_vector( void * const-char-*name, int num_components,
    void * const-int-*i, int num_elems );
extern "C" bool al_set_shader_float_vector( void * const-char-*name, int num_components,
    void * const-float-*f, int num_elems );
extern "C" void * al_get_default_shader_source( int ALLEGRO_SHADER_PLATFORM-platform,
   int ALLEGRO_SHADER_TYPE-type );
\ extern "C" void al_get_opengl_texture_size( void * ALLEGRO_BITMAP-*bitmap, void * int-*w, void * int-*h );
